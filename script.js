$(document).ready(function() {
    init();
    // Highscores eventlistener
    $("#viewHighScores").on("click", function() {
        // 
        alert("You have clicked the high scores menu")
        $('#question').text("High Scores");
    });



    $('#buttons').click(function() {
        if(this.tracker === 0) {
            counterdowner();
            next();
        } else {
            console.log("button has been pressed");
            next();
        }

    });

    // Button eventlistener

    // $("#mainButton").on("click", function() {
    //     if(this.tracker === 0) {
    //         counterdowner();
    //         next();
    //         console.log(answers);
    //         // $('#mainButton').hide();

    //         console.log("quiz started")
    //     }
    //     // } else if (tracker > 0) {
    //     //     next();
    //     //     console.log(answers);
    //     //     console.log(this.tracker);

    //     //     console.log("next question");
        

    // }); 



});

function init() {
    this.time = 75;
    this.tracker = 0;
    this.unpacked = [];
    this.answers = [];
    this.buttonTracker = 0;
    this.extraButtons = null;

    console.log("Time has been set to " + this.time + "\nTracker has been set to " + this.tracker)
    unpack(questions, this.unpacked);

    $("#question").text("Coding Quiz Challenge");
    
    $("#main-content").text("Try to answer the following code-related questions within the time limit. Keep in mind that incorrect answers will penalize your score/time by ten seconds!");

    // return this.time, this.tracker, this.unpacked;
}

//  How to prevent timer from compounding?
function counterdowner() {

    let timerFunction = setInterval(function(time) {
        // For testing purposes
        // console.log("Timer is at" + this.time);
        if(this.time <= 0) {
            this.time = 0;
            $("#main-content").text("OUT OF TIME");
            
        }
        $("#timer").text(("Time: " + String(this.time))); 

        this.time -= 1;
    }, 1000);
    
    timerFunction;
}

function checkAnswer() {
    // 1. Find a way to uniquely create and identify each button
    // 2. Check if clicked button's value matches the answer
    // 3. Return True or False
}

function next() {
    deleteButtons();
    createButtons();
    displayChoices();
    $("#main-content").text(this.unpacked[this.tracker].title);
    this.tracker += 1;
}

// Takes the array generated by createButtons(), and appends a corresponding number of buttons
function displayChoices() {
    $('body').append('<div id = "buttons"></div>')
    for (let i = 0; i < answers.length; i++) {

        $('#buttons').append('<input type="button" value = "Dynamic Button" class = "btn btn-primary btn-sx">');
        // this.buttonTracker += 1;
        // console.log(this.buttonTracker);
    }
    $('#buttons').click(function() {
        next();
    });

    // answers.forEach(ele => $("body").append(this.extraButtons), this.buttonTracker += 1);
}

// Create an array of the possible answers
function createButtons() {
    for (let i = 0; i < unpacked[tracker].choices.length; i++) {
        answers.push(unpacked[tracker].choices[i]);
    }
}

// Empy the array of previous question's possible answers
function deleteButtons() {
    $('#buttons').remove();
    answers = [];

}

// Unpacks the question object into a dictionary
function unpack(obj, dest) {
    for (var key in obj) {
        dest[key] = obj[key];
    }
}

function scoreScreen() {
    
}

